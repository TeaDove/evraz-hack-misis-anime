version: '3.1'

services:
  mongo:
    image: mongo:6.0.4
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: evraz
    ports:
      - 27017:27017
    volumes:
      - './app/data/mongo_data:/data/db'
      - './extra/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro'
    networks:
      - backend
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  db:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: chartbrew
      MYSQL_USER: chartbrew
      MYSQL_PASSWORD: chartbrew
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    ports:
      - 3306:3306
    volumes:
      - ./app/data/cb-db/:/var/lib/mysql
    networks:
      - backend

  chartbrew:
    image: razvanilin/chartbrew:latest-arm64
    restart: always
    ports:
      - 4018:4018
      - 4019:4019
    environment:
      CB_DB_HOST: "db:3306"
      CB_DB_NAME: chartbrew
      CB_DB_USERNAME: chartbrew
      CB_DB_PASSWORD: chartbrew
      REACT_APP_CLIENT_HOST: "http://0.0.0.0:4018"
    expose:
      - 4018
      - 4019
    depends_on:
      - mongo
    networks:
      - backend

  backend_web:
    restart: always
    environment:
      &backend_enviroments
      MISIS_KAFKA_HOST: "rc1a-b5e65f36lm3an1d5.mdb.yandexcloud.net:9091"
      MISIS_KAFKA_TOPIC: "zsmk-9433-dev-01"
      MISIS_KAFKA_USER: "9433_reader"
      MISIS_KAFKA_PASSWORD: "eUIpgWu0PWTJaTrjhjQD3.hoyhntiK"
      MISIS_KAFKA_READ_FROM_START: "false"
      MISIS_MONGO_DATABASE: "evraz"
      MISIS_MONGO_HOST: "mongo"
      MISIS_MONGO_PORT: 27017
      MISIS_MONGO_USERNAME: "root"
      MISIS_MONGO_PASSWORD: "root"
      MISIS_UVICORN_HOST: "0.0.0.0"
      MISIS_UVICORN_PORT: 8000
    build:
      context: .
      dockerfile: DockerfileWeb
    networks:
      - backend
    depends_on:
      - mongo
      - backend_kafka_processor
    ports:
      - 8000:8000

  backend_kafka_processor:
    restart: always
    environment:
      <<: *backend_enviroments
    build:
      context: .
      dockerfile: DockerfileKafka
    networks:
      - backend
    depends_on:
      - mongo

networks:
  backend:
    name: backend
